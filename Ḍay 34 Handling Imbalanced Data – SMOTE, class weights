import numpy as np
import pandas as pd
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
from collections import Counter
# Generate synthetic dataset
X, y = make_classification(n_samples=2000, n_features=10, 
                           n_informative=6, n_redundant=2, 
                           weights=[0.95, 0.05], random_state=42)

print("Before balancing:", Counter(y))
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y)
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)
print("Without Balancing:\n", classification_report(y_test, y_pred))
sm = SMOTE(random_state=42)
X_train_res, y_train_res = sm.fit_resample(X_train, y_train)

print("After SMOTE:", Counter(y_train_res))
rf_smote = RandomForestClassifier(random_state=42)
rf_smote.fit(X_train_res, y_train_res)

y_pred_smote = rf_smote.predict(X_test)
print("After SMOTE:\n", classification_report(y_test, y_pred_smote))
rf_weighted = RandomForestClassifier(class_weight='balanced', random_state=42)
rf_weighted.fit(X_train, y_train)

y_pred_weighted = rf_weighted.predict(X_test)
print("With Class Weights:\n", classification_report(y_test, y_pred_weighted))
from sklearn.metrics import ConfusionMatrixDisplay
import matplotlib.pyplot as plt

ConfusionMatrixDisplay.from_estimator(rf_smote, X_test, y_test)
plt.title("SMOTE Balanced Confusion Matrix")
plt.show()

