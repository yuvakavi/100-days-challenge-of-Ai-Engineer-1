#  Multi-Layer Perceptron (MLP) Classification Example

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report

#  Load dataset
iris = load_iris()
X = iris.data
y = iris.target

# 2Ô∏è Split data into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#  feature scaling (very important for MLP)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#  Build MLP model
model = MLPClassifier(hidden_layer_sizes=(10, 8),  # two hidden layers with 10 and 8 neurons
                      activation='relu',
                      solver='adam',
                      max_iter=500,
                      random_state=42)

#  Train the model
model.fit(X_train, y_train)

#  Predict
y_pred = model.predict(X_test)

# 7Ô∏è‚É£ Evaluate performance
print("‚úÖ Accuracy:", accuracy_score(y_test, y_pred))
print("\nüìä Classification Report:\n", classification_report(y_test, y_pred))
