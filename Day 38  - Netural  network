
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt


data = {
    'Skill_1': [7,8,3,9,5,2,6,8,4,9],
    'Skill_2': [8,7,2,9,4,3,6,9,5,8],
    'Experience_1': [3,5,1,6,2,1,4,5,3,7],
    'Experience_2': [4,4,1,7,3,1,3,6,2,6],
    'Teamwork_Compatibility': [8,9,3,10,6,2,7,9,4,10],
    'Good_Pair': [1,1,0,1,1,0,1,1,0,1]
}

df = pd.DataFrame(data)
print("\n Sample Data:\n", df.head())


X = df[['Skill_1','Skill_2','Experience_1','Experience_2','Teamwork_Compatibility']]
y = df['Good_Pair']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)


mlp = MLPClassifier(hidden_layer_sizes=(10,5), activation='relu', solver='adam', max_iter=1000, random_state=42)
mlp.fit(X_train, y_train)


y_pred = mlp.predict(X_test)

print("\n Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))


new_pair = np.array([[7, 8, 4, 5, 9]])
pred = mlp.predict(new_pair)
print("\n Prediction for New Pair:", " Good Match" if pred[0]==1 else " Not a Good Match")

plt.plot(mlp.loss_curve_)
plt.title("Neural Network Training Loss Curve")
plt.xlabel("Iterations")
plt.ylabel("Loss")
plt.show()


