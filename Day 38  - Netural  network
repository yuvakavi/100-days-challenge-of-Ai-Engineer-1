
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt


# Example: Predict if student passes (1) or fails (0)
data = {
    'Hours_Studied': [1,2,3,4,5,6,7,8,9,10],
    'Attendance': [50,55,60,65,70,75,80,85,90,95],
    'Pass': [0,0,0,1,1,1,1,1,1,1]
}
df = pd.DataFrame(data)

# Step 2: Split features and labels
X = df[['Hours_Studied', 'Attendance']]
y = df['Pass']

# Step 3: Split train-test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Create and train Neural Network model
mlp = MLPClassifier(hidden_layer_sizes=(10, 5), activation='relu', solver='adam', max_iter=1000, random_state=42)
mlp.fit(X_train, y_train)

# Step 5: Predictions
y_pred = mlp.predict(X_test)

# Step 6: Evaluation
print("\nâœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Classification Report:\n", classification_report(y_test, y_pred))
print("\nðŸ§¾ Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Step 7: Predict for new data
new_data = np.array([[6, 80], [2, 55]])
pred = mlp.predict(new_data)
print("\nðŸ”® Predictions for new data:", pred)

# Step 8: Plot loss curve
plt.plot(mlp.loss_curve_)
plt.title("Neural Network Training Loss")
plt.xlabel("Iterations")
plt.ylabel("Loss")
plt.show()
