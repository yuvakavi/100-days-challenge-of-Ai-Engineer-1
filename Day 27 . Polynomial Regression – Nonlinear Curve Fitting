# Polynomial Regression Example
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score

# 1️⃣ Generate synthetic nonlinear data
np.random.seed(0)
X = np.random.uniform(0, 10, 30)
y = 2 + 3 * X + 1.5 * X**2 + np.random.randn(30) * 5

X = X.reshape(-1, 1)

# 2️⃣ Transform data for polynomial regression (degree=2)
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

# 3️⃣ Fit Linear Regression on transformed features
model = LinearRegression()
model.fit(X_poly, y)

# 4️⃣ Predict values
X_new = np.linspace(0, 10, 100).reshape(-1, 1)
X_new_poly = poly.transform(X_new)
y_pred = model.predict(X_new_poly)

# 5️⃣ Plot results
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X_new, y_pred, color='red', linewidth=2, label='Polynomial Fit (deg=2)')
plt.title("Polynomial Regression (Nonlinear Curve Fitting)")
plt.xlabel("X")
plt.ylabel("y")
plt.legend()
plt.show()

# 6️⃣ Print coefficients and accuracy
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("R² Score:", r2_score(y, model.predict(X_poly)))
